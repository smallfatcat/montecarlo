(function(){"use strict";const j=["Clubs","Diamonds","Hearts","Spades"],$=["A","2","3","4","5","6","7","8","9","10","J","Q","K"];function z(){const e=[];for(const t of j)for(const n of $)e.push({rank:n,suit:t});return e}function w(e){if(!Number.isInteger(e)||e<=0)throw new Error("numberOfDecks must be a positive integer");const t=[];for(let n=0;n<e;n+=1)t.push(...z());return t}function T(e,t=Math.random){for(let n=e.length-1;n>0;n-=1){const s=Math.floor(t()*(n+1));[e[n],e[s]]=[e[s],e[n]]}return e}const D={smallBlind:1,bigBlind:2};function C(e){return{...e,deck:[...e.deck],community:[...e.community],seats:e.seats.map(t=>({...t,hole:[...t.hole]})),pot:{...e.pot},rules:{...e.rules}}}function G(e){return e.rules.bigBlind}function B(e,t){const n=e.length;for(let s=1;s<=n;s+=1){const r=(t+s)%n,a=e[r];if(!a.hasFolded&&!a.isAllIn&&a.stack>0)return r}return null}function F(e,t){const n=e.length;for(let s=1;s<=n;s+=1){const r=(t+s)%n;if(e[r].stack>0)return r}return null}function X(e){return e.filter(t=>!t.hasFolded&&t.stack>0).length}const P={poker:{rakePercent:0,blinds:{increaseEveryHands:50,increaseFactor:2}}},Y=Object.fromEntries(["2","3","4","5","6","7","8","9","10","J","Q","K","A"].map((e,t)=>[e,t]));function b(e,t){return t-e}function S(e){return Y[e.rank]}function V(e){for(let t=1;t<e.length;t+=1)if(e[t-1]-1!==e[t])return!1;return!0}function O(e){return Array.from(new Set(e)).sort(b)}function Z(e){if(e.length!==7)throw new Error("evaluateSeven expects exactly 7 cards");const t=new Map,n=new Map;for(const o of e){const c=S(o);t.set(c,(t.get(c)??0)+1);const l=o.suit,h=n.get(l)??[];h.push(o),n.set(l,h)}for(const[,o]of n)if(o.length>=5){const c=o.map(S).sort(b),l=O(c),h=l.includes(12)?[...l,-1]:l;for(let f=0;f+4<h.length;f+=1){const k=h.slice(f,f+5);if(V(k))return{class:"straight_flush",ranks:[k[0]===-1?3:k[0],...k.slice(1)]}}}const s=Array.from(t.entries()).map(([o,c])=>({v:o,n:c})).sort((o,c)=>c.n-o.n||c.v-o.v),r=s.find(o=>o.n===4);if(r){const o=s.filter(c=>c.v!==r.v).map(c=>c.v).sort(b);return{class:"four_kind",ranks:[r.v,o[0]]}}const a=s.filter(o=>o.n===3),i=s.filter(o=>o.n===2);if(a.length>=2||a.length>=1&&i.length>=1){const o=a[0],c=a.length>=2?{v:a[1].v}:{v:i[0].v};return{class:"full_house",ranks:[o.v,c.v]}}for(const[,o]of n)if(o.length>=5)return{class:"flush",ranks:o.map(S).sort(b).slice(0,5)};{const o=O(e.map(S)),c=o.includes(12)?[...o,-1]:o;for(let l=0;l+4<c.length;l+=1){const h=c.slice(l,l+5);if(V(h))return{class:"straight",ranks:[h[0]===-1?3:h[0],...h.slice(1)]}}}if(a.length>=1){const o=a[0],c=s.filter(l=>l.n===1).map(l=>l.v).sort(b).slice(0,2);return{class:"three_kind",ranks:[o.v,...c]}}if(i.length>=2){const[o,c]=i.slice(0,2).sort((h,f)=>f.v-h.v),l=s.filter(h=>h.n===1).map(h=>h.v).sort(b)[0];return{class:"two_pair",ranks:[o.v,c.v,l]}}if(i.length===1){const o=i[0],c=s.filter(l=>l.n===1).map(l=>l.v).sort(b).slice(0,3);return{class:"pair",ranks:[o.v,...c]}}return{class:"high_card",ranks:O(e.map(S)).slice(0,5)}}function v(e){for(;;){const t=e.pop();if(t)return t;e.push(...T(w(6)))}}function tt(e,t,n=200,s){const r=Array.from({length:e},(a,i)=>({seatIndex:i,isCPU:t.includes(i),hole:[],stack:n,committedThisStreet:0,totalCommitted:0,hasFolded:!1,isAllIn:!1}));return{handId:0,deck:T(w(6)),community:[],seats:r,buttonIndex:0,street:null,status:"idle",currentToAct:null,lastAggressorIndex:null,betToCall:0,lastRaiseAmount:D.bigBlind,pot:{main:0},rules:{...D},gameOver:!1}}function et(e){const t=C(e);if(t.gameOver)return t;const n=P.poker.blinds?.increaseEveryHands,s=P.poker.blinds?.increaseFactor;if(t.handId>0&&t.handId%n===0&&(t.rules.smallBlind=Math.max(1,t.rules.smallBlind*s),t.rules.bigBlind=Math.max(1,t.rules.bigBlind*s)),t.deck.length<20&&(t.deck=T(w(6))),t.handId+=1,t.community=[],t.seats=t.seats.map(c=>({...c,hole:[],committedThisStreet:0,totalCommitted:0,hasFolded:c.stack<=0,isAllIn:!1})),t.pot={main:0},t.lastRaiseAmount=t.rules.bigBlind,t.betToCall=0,t.street="preflop",t.status="in_hand",t.seats.filter(c=>c.stack>0).length<2)return t.status="hand_over",t.gameOver=!0,t;const a=F(t.seats,t.buttonIndex),i=F(t.seats,a);W(t,a,t.rules.smallBlind),W(t,i,t.rules.bigBlind);const u=t.seats.filter(c=>c.stack>0).length*2;t.deck.length<u&&(t.deck=T(w(6)));for(let c=0;c<2;c+=1)for(let l=0;l<t.seats.length;l+=1){const h=(t.buttonIndex+1+l)%t.seats.length,f=t.seats[h];f.stack<=0||f.hole.push(v(t.deck))}return t.seats.filter(c=>c.stack>0).length<2?(t.status="hand_over",t.gameOver=!0,t):(t.currentToAct=B(t.seats,i),t.currentToAct==null?R(t):(t.lastAggressorIndex=i,t.betToCall=Math.max(...t.seats.map(c=>c.committedThisStreet)),t))}function W(e,t,n){const s=e.seats[t];if(s.stack<=0)return;const r=Math.min(s.stack,n);s.stack-=r,s.committedThisStreet+=r,s.totalCommitted+=r,e.pot.main+=r,s.stack===0&&(s.isAllIn=!0)}function nt(e){if(e.status!=="in_hand"||e.currentToAct==null)return[];const t=e.seats[e.currentToAct];if(t.isAllIn||t.hasFolded)return[];const n=e.betToCall-t.committedThisStreet,s=n<=0,r=e.betToCall>0,a=r&&!t.isAllIn&&t.stack>n,i=s&&!r&&t.stack>0,u=["fold"];return s?u.push("check"):u.push("call"),i&&u.push("bet"),a&&u.push("raise"),u}function st(e,t){if(e.status!=="in_hand"||e.currentToAct==null)return e;const n=C(e),s=n.currentToAct,r=n.seats[s];if(r.hasFolded||r.isAllIn)return n;const a=Math.max(0,n.betToCall-r.committedThisStreet),i=G(n);switch(t.type){case"fold":{r.hasFolded=!0;break}case"check":{if(a>0)throw new Error("Cannot check facing a bet");break}case"call":{if(a<=0)throw new Error("Nothing to call");const f=Math.min(r.stack,a);K(n,r,f);break}case"bet":{if(a>0)throw new Error("Cannot bet facing a bet");const f=Math.max(t.amount??i,i),k=Math.min(r.stack,f);K(n,r,k),n.betToCall=r.committedThisStreet,n.lastRaiseAmount=k,n.lastAggressorIndex=r.seatIndex;break}case"raise":{if(n.betToCall<=0)throw new Error("Nothing to raise");const f=Math.max(n.lastRaiseAmount,i),k=Math.max(t.amount??f,0),x=Math.max(0,r.stack-a),d=Math.min(k,x),g=Math.min(r.stack,a+d);if(g<=0)return n;const y=r.committedThisStreet;K(n,r,g),n.betToCall=Math.max(n.betToCall,r.committedThisStreet);const M=r.committedThisStreet-y-a;M>=f&&(n.lastRaiseAmount=M,n.lastAggressorIndex=r.seatIndex);break}default:return n}if(X(n.seats)<=1)return R(n);const u=B(n.seats,s),o=n.seats.filter(f=>!f.hasFolded&&!f.isAllIn&&f.hole.length===2),c=o.length===0,l=c||o.every(f=>f.committedThisStreet===n.betToCall);return c||l?at(n):(n.currentToAct=u,n)}function K(e,t,n){const s=Math.min(n,t.stack);t.stack-=s,t.committedThisStreet+=s,t.totalCommitted+=s,e.pot.main+=s,t.stack===0&&(t.isAllIn=!0)}function rt(e){e.seats.forEach(t=>t.committedThisStreet=0),e.betToCall=0,e.lastRaiseAmount=e.rules.bigBlind,e.lastAggressorIndex=null}function at(e){const t=C(e);if(t.street==="preflop")t.community.push(v(t.deck),v(t.deck),v(t.deck)),t.street="flop";else if(t.street==="flop")t.community.push(v(t.deck)),t.street="turn";else if(t.street==="turn")t.community.push(v(t.deck)),t.street="river";else if(t.street==="river")return t.street="showdown",R(t);rt(t);let n=B(t.seats,t.buttonIndex);if(n==null)return R(t);t.currentToAct=n;const s=ct(t.seats,n);return t.lastAggressorIndex=s,t}function R(e){const t=C(e),n=t.seats.filter(a=>!a.hasFolded&&a.hole.length===2);if(n.length===1){const a=q(t.pot.main);n[0].stack+=t.pot.main-a}else{for(;t.community.length<5;)t.community.push(v(t.deck));const a=it(t);for(const i of a){if(i.amount<=0||i.eligibleSeatIdxs.length===0)continue;const u=q(i.amount),o=i.amount-u,c=i.eligibleSeatIdxs.filter(d=>t.seats[d].hole.length===2).map(d=>({idx:d,eval:Z([...t.seats[d].hole,...t.community])}));let l=null,h=[];const f={high_card:0,pair:1,two_pair:2,three_kind:3,straight:4,flush:5,full_house:6,four_kind:7,straight_flush:8};for(const d of c){const g=f[d.eval.class];if(!l)l={classIdx:g,ranks:d.eval.ranks},h=[d.idx];else{const y=g-l.classIdx,M=y===0?ot(d.eval.ranks,l.ranks):y;M>0?(l={classIdx:g,ranks:d.eval.ranks},h=[d.idx]):M===0&&h.push(d.idx)}}const k=Math.floor(o/h.length);let x=o-k*h.length;for(const d of h)t.seats[d].stack+=k;x>0&&lt(h,x,(t.buttonIndex+1)%t.seats.length,t.seats.length,d=>{t.seats[d].stack+=1})}}t.status="hand_over",t.currentToAct=null,t.street="showdown";const s=F(t.seats,t.buttonIndex);return s!=null&&(t.buttonIndex=s),t.seats.filter(a=>a.stack>0).length<2&&(t.gameOver=!0),t}function ot(e,t){const n=Math.max(e.length,t.length);for(let s=0;s<n;s+=1){const r=e[s]??-1,a=t[s]??-1;if(r!==a)return r-a}return 0}function it(e){const t=e.seats.map((r,a)=>({idx:a,total:Math.max(0,Math.floor(r.totalCommitted))})).filter(r=>r.total>0).sort((r,a)=>r.total-a.total);if(t.length===0)return[];const n=[];let s=0;for(let r=0;r<t.length;r+=1){const a=t[r].total,i=a-s;if(i>0){const u=t.slice(r).map(l=>l.idx),o=i*u.length,c=u.filter(l=>!e.seats[l].hasFolded);n.push({amount:o,eligibleSeatIdxs:c}),s=a}}return n}function ct(e,t){const n=e.length;for(let s=1;s<=n;s+=1){const r=(t-s+n)%n,a=e[r];if(!a.hasFolded&&!a.isAllIn)return r}return null}function lt(e,t,n,s,r){let a=n;for(;t>0;){const i=e.find(u=>u===a);if(i!=null&&(r(i),t-=1,t===0))break;a=(a+1)%s}}function q(e){const t=P.poker.rakePercent;let n=Math.floor(e*t);return Math.max(0,n)}const ut=Object.fromEntries(["2","3","4","5","6","7","8","9","10","J","Q","K","A"].map((e,t)=>[e,t]));function m(e){return ut[e]}function ht(e,t){return e.suit===t.suit}function ft(e){const t=new Map;for(const n of e)t.set(n.rank,(t.get(n.rank)??0)+1);return t}function dt(e){const t=new Map;for(const n of e)t.set(n.suit,(t.get(n.suit)??0)+1);return t}function mt(e){return e.length===0?null:e.map(t=>t.rank).sort((t,n)=>m(n)-m(t))[0]??null}function pt(e,t){const n=dt([...e,...t]);for(const[,s]of n)if(s>=4)return!0;return!1}function kt(e,t){const n=Array.from(new Set([...e,...t].map(s=>m(s.rank)))).sort((s,r)=>s-r);for(let s=0;s+3<n.length;s+=1){const r=n[s],a=n[s+1],i=n[s+2],u=n[s+3];if(a===r+1&&i===a+1&&u===i+1)return!0}return!!(n.includes(m("A"))&&n.includes(m("2"))&&n.includes(m("3"))&&n.includes(m("4")))}function gt(e,t){const n=ft([...e,...t]),s=mt(t);let r=!1,a=!1,i=!1,u=0;for(const[,l]of n)l===3&&(i=!0),l===2&&(u+=1);u>=1&&(r=!0),u>=2&&(a=!0);let o=!1,c=!1;if(r)if(t.length>=3){if(s&&e.find(l=>l.rank===s)!=null&&(o=!0),e.length===2&&e[0].rank===e[1].rank){const l=m(e[0].rank),h=Math.max(...t.map(f=>m(f.rank)));l>h&&(c=!0)}}else e.length===2&&e[0].rank===e[1].rank&&(c=!0);return{pair:r,topPair:o,overPair:c,twoPair:a,trips:i}}function xt(e){const[t,n]=e,s=m(t.rank),r=m(n.rank),a=Math.max(s,r),i=Math.min(s,r),u=t.rank===n.rank,o=ht(t,n),c=Math.abs(s-r);return u&&s>=m("J")||o&&(t.rank==="A"&&n.rank==="K"||n.rank==="A"&&t.rank==="K")?"premium":u&&s>=m("9")||a>=m("A")&&i>=m("Q")&&o||a>=m("A")&&i>=m("K")?"strong":u||o&&c<=2&&a>=m("7")&&i>=m("4")?"speculative":"trash"}function bt(e,t){const n=e.seats.length,s=(e.buttonIndex+1)%n,r=(e.buttonIndex+2)%n;if(t===s||t===r)return"blinds";const a=(r+1)%n;let i=t-a;return i<0&&(i+=n),i<=1?"early":i<=n-3?"middle":"late"}function vt(e,t="tight"){const n=new Set(nt(e)),s=e.currentToAct??0,r=e.seats[s],a=r.hole,i=e.community,u=Math.max(0,e.betToCall-r.committedThisStreet),o=bt(e,s),c=e.lastRaiseAmount||e.rules.bigBlind,l=Math.max(1,e.rules.bigBlind),h=e.seats.map((p,A)=>A===s||p.hasFolded?0:p.stack).filter(p=>p>0),f=Math.min(r.stack,h.length?Math.max(...h):r.stack),k=f/l,x=e.pot.main+u,d=x>0?f/x:1/0;if(e.street==="preflop"){const p=xt(a),A=t==="loose"||p==="premium"||p==="strong"&&(o==="late"||o==="middle");if(u>0){if(k<=20&&n.has("raise")&&(A||p==="speculative"&&o==="late"))return{type:"raise",amount:Math.max(0,r.stack-u)};if(A&&n.has("raise")){const I=Math.max(l,c),J=Math.max(Math.floor(I*1.5),l),Q=Math.max(l*3,l),At=e.betToCall<=l?Q:J,U=Math.max(Math.min(At-u,r.stack-u),l);return(u+U)/Math.max(1,r.stack)>.5&&p==="speculative"?n.has("call")?{type:"call"}:{type:"fold"}:{type:"raise",amount:U}}return p!=="trash"&&n.has("call")?{type:"call"}:n.has("fold")?{type:"fold"}:n.has("check")?{type:"check"}:{type:"call"}}else{if(A&&n.has("bet")){if(k<=12&&(p==="premium"||p==="strong"))return{type:"bet",amount:r.stack};const I=Math.max(l*3,l);return{type:"bet",amount:Math.min(I,r.stack)}}return n.has("check")?{type:"check"}:n.has("call")?{type:"call"}:{type:"fold"}}}const g=gt(a,i),y=pt(a,i),M=kt(a,i),_=g.trips||g.twoPair||g.overPair,H=g.topPair||g.pair,L=y||M,N=e.pot.main;if(u>0){if(_&&n.has("raise")){if(k<=20||d<=2)return{type:"raise",amount:Math.max(0,r.stack-u)};const p=Math.max(l,c),A=Math.max(Math.floor(p*1.5),l),I=Math.max(Math.floor((N+u)*(t==="tight"?.7:.9)),A);return{type:"raise",amount:Math.min(I,Math.max(0,r.stack-u))}}return(_||H||L)&&n.has("call")?{type:"call"}:n.has("fold")?{type:"fold"}:n.has("call")?{type:"call"}:{type:"check"}}else{if(_&&n.has("bet")){if(k<=20||d<=2)return{type:"bet",amount:r.stack};const p=Math.max(Math.floor(N*.66),l);return{type:"bet",amount:Math.min(p,r.stack)}}if((H||L)&&n.has("bet")&&Math.random()<.4){const p=Math.max(Math.floor(N*.5),l);return{type:"bet",amount:Math.min(p,r.stack)}}return n.has("check")?{type:"check"}:n.has("call")?{type:"call"}:{type:"fold"}}}const E=self;E.onmessage=e=>{const t=e.data;if(!(!t||t.type!=="run"))try{const s={type:"done",result:Mt(t.options,(r,a)=>{const i={type:"progress",completed:r,total:a};E.postMessage(i)})};E.postMessage(s)}catch(n){const s={type:"error",error:n.message};E.postMessage(s)}};function Mt(e,t){const{hands:n,seats:s,startingStack:r}=e,a=Array.from({length:Math.max(0,s-1)},(o,c)=>c+1);let i=tt(s,a,r);const u=Math.max(1,Math.floor(n/20));for(let o=0;o<n;o+=1){i=et(i);let c=2e3;for(;i.status==="in_hand"&&c-- >0;)i=st(i,vt(i,"tight"));((o+1)%u===0||o+1===n)&&t(o+1,n)}return{endingStacks:i.seats.map(o=>o.stack),handsPlayed:n}}})();
